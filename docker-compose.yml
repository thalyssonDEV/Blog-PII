# --- INÍCIO DA DEFINIÇÃO DOS SERVIÇOS/CONTÊINERES ---
services:

  # 1. SERVIÇO DO NGINX REVERSE PROXY
  # Este contêiner atua como um porteiro. Ele recebe todo o tráfego das portas 80 (HTTP)
  # e 443 (HTTPS) e o redireciona para a sua aplicação com base no nome do domínio.
  nginx-proxy:
    image: nginxproxy/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/nginx/certs:ro
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    restart: always

  # 2. SERVIÇO DO LET'S ENCRYPT
  # Este contêiner trabalha em conjunto com o nginx-proxy para automaticamente
  # solicitar, renovar e instalar certificados SSL/TLS gratuitos do Let's Encrypt.
  letsencrypt-companion:
    image: nginxproxy/acme-companion
    container_name: letsencrypt-companion
    restart: always
    volumes:
      - certs:/etc/nginx/certs
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      # Informa a este contêiner qual é o contêiner do nginx-proxy
      - NGINX_PROXY_CONTAINER=nginx-proxy

  # 3. O SERVIÇO DA SUA APLICAÇÃO DE BLOG
  blog-app:
    # Constrói a imagem a partir do Dockerfile no diretório atual
    build: .
    container_name: blog-app
    restart: always
    # Carrega as variáveis de ambiente do seu ficheiro .env
    env_file:
      - .env
    # Monta o ficheiro de credenciais da Google Cloud para dentro do contêiner
    volumes:
      - ./credentials.json:/app/credentials.json:ro
    # Expõe a porta da aplicação APENAS para a rede interna do Docker,
    # para que o nginx-proxy possa comunicar com ela.
    expose:
      - "8000"
    # Variáveis de ambiente que instruem o nginx-proxy sobre como lidar com este serviço
    environment:
      # --- IMPORTANTE: CONFIGURE ESTAS VARIÁVEIS ---
      # O seu nome de domínio (ex: meublog.com)
      - VIRTUAL_HOST=verby.ddns.net
      # A porta interna em que a sua aplicação Node.js está a rodar
      - VIRTUAL_PORT=8000
      # O domínio para o qual o Let's Encrypt deve gerar o certificado
      - LETSENCRYPT_HOST=verby.ddns.net
      # O seu e-mail para receber notificações do Let's Encrypt (ex: sobre renovações)
      - LETSENCRYPT_EMAIL=contato.thalyssondel@gmail.com

# --- FIM DOS SERVIÇOS ---

# Define os volumes que serão partilhados entre os contêineres para persistir os dados
volumes:
  certs:
  vhost:
  html:

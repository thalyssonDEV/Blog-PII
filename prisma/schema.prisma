// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo do Usuário
model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  nome        String?
  senha_hash  String
  foto_url    String?
  createdAt   DateTime  @default(now())

  // Relação: UM usuário pode ter VÁRIOS posts.
  posts       Post[]
  // Relação: UM usuário pode ter VÁRIOS comentários.
  comentarios Comment[]

  @@map("usuario")
}

// Modelo do Post
model Post {
  id        Int      @id @default(autoincrement())
  titulo    String
  conteudo  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Chave Estrangeira para o autor ---
  autorId   Int    @map("autor_id")
  // Relação: Muitos posts pertencem a UM usuário (autor).
  // Se o autor for deletado, seus posts também serão (em cascata).
  autor     User   @relation(fields: [autorId], references: [id], onDelete: Cascade)

  // Relação: UM post pode ter VÁRIOS comentários.
  comentarios Comment[]

  @@map("post")
}

// Modelo do Comentário
model Comment {
  id        Int      @id @default(autoincrement())
  texto     String
  createdAt DateTime @default(now())

  // --- Chave Estrangeira para o post ---
  postId    Int    @map("post_id")
  // Relação: Muitos comentários pertencem a UM post.
  // Se o post for deletado, seus comentários também serão.
  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  // --- Chave Estrangeira para o autor do comentário ---
  autorId   Int    @map("autor_id")
  // Relação: Muitos comentários pertencem a UM usuário (autor).
  // Se o autor for deletado, seus comentários também serão.
  autor     User   @relation(fields: [autorId], references: [id], onDelete: Cascade)

  @@map("comentario")
}